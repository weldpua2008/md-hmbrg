#
# Better to use IAM auth in Lambda
#
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'CloudFormation Template to create Amazon Kinesis Streams.'

Parameters:
  ParentVPCStack:
    Description: 'Provide Stack name of parent VPC stack. Refer Cloudformation dashboard in AWS Console to get this.'
    Type: String
    MinLength: '1'
    MaxLength: '128'
    AllowedPattern: '^[a-zA-Z]+[0-9a-zA-Z\-]*$'
    Default: 'vpc-3az'

  ParentRedshiftStack:
    Description: 'Provide Stack name of parent Redshift stack. Refer Cloudformation dashboard in AWS Console to get this.'
    Type: String
    MinLength: '1'
    MaxLength: '128'
    AllowedPattern: '^[a-zA-Z]+[0-9a-zA-Z\-]*$'
    Default: 'redshift'

  LambdaPath:
    Description: Lambda Path.
    Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Redshift Parameters
        Parameters:
          - ParentRedshiftStack
      -
        Label:
          default: VPC Parameters
        Parameters:
          - ParentVPCStack
      -
        Label:
          default: LambdaPath Parameter
        Parameters:
          - LambdaPath


Resources:

  # DataBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     VersioningConfiguration:
  #       Status: Enabled
#
  # DeliveryRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Sid: ''
  #           Effect: Allow
  #           Principal:
  #             Service: firehose.amazonaws.com
  #           Action: 'sts:AssumeRole'
  #           Condition:
  #             StringEquals:
  #               'sts:ExternalId': !Ref 'AWS::AccountId'
  DeliveryPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - Fn::ImportValue: !Join [ "-", [ !Ref "ParentRedshiftStack", "DataBucketArn" ] ]
              - !Sub
                - ${ValueFromBaseStack}/*
                - ValueFromBaseStack:
                    Fn::ImportValue: !Join [ "-", [ !Ref "ParentRedshiftStack", "DataBucketArn" ] ]

      Roles:
        - !Ref DeliveryRole
#
#
  # InvokeLambdaPolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: firehose_lambda_policy
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - 'lambda:InvokeFunction'
  #           # Resource:
  #           #   - !GetAtt ProcessLambdaFunction.Arn
  #     Roles:
  #       - !Ref DeliveryRole
#
#
  # ProcessLambdaExecutionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service:
  #           - lambda.amazonaws.com
  #         Action:
  #         - sts:AssumeRole
  #     Policies:
  #       - PolicyName: allowLambdaLogs
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #           - Effect: Allow
  #             Action:
  #             - logs:*
  #             Resource: arn:aws:logs:*:*:*
  DeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: FirehoseDeliveryRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: "sts:AssumeRole"
            Condition:
              StringEquals:
                "sts:ExternalId": !Ref "AWS::AccountId"
      Policies:
          - PolicyName: personalizeEventsPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - kinesis:*
                    - s3:*
                    - kms:*
                    - logs:*
                    - lambda:*
                  Resource:
                    - "*"
              # Resource: { Fn::GetAtt: [ sourceDynamoDbTable, StreamArn ] }

  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: EventStream
      RetentionInDays: 30
  CloudWatchLogStream:
    Type: AWS::Logs::LogStream
    DependsOn:
      - CloudWatchLogGroup
    Properties:
      LogGroupName: EventStream
      LogStreamName: S3Delivery


  EventStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      Name: EventStream
      RetentionPeriodHours: 24
      ShardCount: 1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EventStream-${AWS::Region}

  FirehoseDeliveryStream:
    DependsOn:
      - DeliveryPolicy
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
        DeliveryStreamName: "EventStream"
        DeliveryStreamType: "KinesisStreamAsSource"
        KinesisStreamSourceConfiguration:
            KinesisStreamARN: !GetAtt EventStream.Arn
            RoleARN: !GetAtt DeliveryRole.Arn
        RedshiftDestinationConfiguration:
            CloudWatchLoggingOptions:
                Enabled: true
                LogGroupName: !Ref CloudWatchLogGroup  #"/aws/kinesisfirehose/EventStream"
                LogStreamName: !Ref CloudWatchLogStream  # "KinesisFirehose2RedshiftDelivery"
            ClusterJDBCURL:
                Fn::ImportValue: !Join [ "-", [ !Ref "ParentRedshiftStack", "RedshiftClusterJDBCURL" ] ]
            CopyCommand:
                DataTableName: "events"
                DataTableColumns: "environment,user_account_id,request_timestamp,referrer,website_id,topic,location,request_id,message,cookie_id,user_agent"
                CopyOptions: "json 'auto' TRUNCATECOLUMNS blanksasnull emptyasnull"
            ProcessingConfiguration:
                Enabled: false
            RoleARN: !GetAtt DeliveryRole.Arn
            S3Configuration:
                BucketARN: #!Sub 'arn:aws:s3:::${DataBucket}'
                    Fn::ImportValue: !Join [ "-", [ !Ref "ParentRedshiftStack", "DataBucketArn" ] ]

                BufferingHints:
                  IntervalInSeconds: 60
                  SizeInMBs: 50
                CloudWatchLoggingOptions:
                    Enabled: true
                    LogGroupName: !Ref CloudWatchLogGroup  #"/aws/kinesisfirehose/EventStream"
                    LogStreamName: !Ref CloudWatchLogStream  # "KinesisFirehose2RedshiftDelivery"
                    # CompressionFormat: UNCOMPRESSED
                EncryptionConfiguration:
                    NoEncryptionConfig: "NoEncryption"
                Prefix: "events"
                RoleARN: !GetAtt DeliveryRole.Arn
            Username:
                Fn::ImportValue: !Join [ "-", [ !Ref "ParentRedshiftStack", "RedshiftUsername" ] ]
            Password:
                Fn::ImportValue: !Join [ "-", [ !Ref "ParentRedshiftStack", "MasterUserPassword" ] ]


  EventConsumer:
    Type: 'AWS::Kinesis::StreamConsumer'
    Properties:
      ConsumerName: !Sub ${AWS::StackName}-EventConsumer-${AWS::Region}
      StreamARN: !GetAtt EventStream.Arn

  ProcessLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              Resource: arn:aws:logs:*:*:*


  ProcessLambdaFunction:
    Type: AWS::Serverless::Function

    Properties:
      Handler: lambda_function.lambda_handler
      CodeUri:
        Bucket: !Sub '${LambdaPath}'
        Key: "lambda.zip"
      Runtime: python3.7
      Timeout: 120
      Role: !GetAtt ProcessLambdaExecutionRole.Arn
#
Outputs:
  EventConsumer:
    Description: A reference to the EventConsumer for HTTP/2 support
    Value: !Ref EventConsumer
